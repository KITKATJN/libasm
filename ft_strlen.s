;В языке nasm ; обозначает комментарии. Строчка 1.
;В строчке 3 global start для линкера указывается с какого места начинать выполнение программы
;Директива section задает секции для объектных файлов
;.text (строка 5) - для кода, стандартный в Linux
;start: в 7 строчке метка, она отмечает место в коде на которое можно переходить
;mov и syscall x86 операторы
;mov помещает данные в регистры
;syscall осуществляет системный вызов и передает управление ядру операционной системы
;rax, rdi, rsi, rdx регистры общего назначения в которые кладутся данные, имеют стандартные способы использования
;rax - аккумулятор
;rdi - указатель на получатель для строк
;rsi - указатель на источник для строк
;rdx - указатель Ввода/Вывода
;0x2000004, 0x2000001 константы для идентификации системных вызовов на Windows и Linux будут другие

section	.text ;
	global ft_strlen

ft_strlen:
	mov	rax, 0; регистр int или u int eax в 32 битах был в 64 это rax
	jmp	while ;jump

while:
	cmp	BYTE[rdi + rax], 0; compare
	je	return ; если дошли до конца строки, то заканчиваем
	inc	rax ; провсто увеличиваем на 1
	jmp	while

return:
	ret
